有一个X*Y的网格，小团要在此网格上从左上角到右下角，只能走格点且只能向右或向下走。请设计一个算法，计算小团有多少种走法。给定两个正整数int x,int y，请返回小团的走法数目。
#include <cstdio>
#include <iostream>
using namespace std;
int sum(int n,int m)
{
    if(n==0||m==0)//要是只有一行或者一列时都只有一种，下标都为0
    {
        return 1;
    }
    return sum(n-1,m)+sum(n,m-1);
}
int main()
{
    int n,m;
    cin>>n>>m;
   cout<<sum(n,m);

}


/*动态规划：
     对于x*Y网格，dp[i][j]表示(i,j)位置一共有多少种走法,
     由于只能向左和向右走，所以第一列和第一行所有位置的走法都是1，即dp[i][0]=1,dp[0][j]=1(0=<i<=x,0<=j<=y)，
     对于其他位置，走法应该等于其左边格点的走法和其上面格点的走法之和，dp[i][j]=dp[i-1][j]+dp[i][j-1]，
     画个图比较容易理解。
*/  
#include<iostream>
#include<vector>
using namespace std;
 
int main()
{
    int x, y;
    cin >> x >> y;
    int dp[11][11];
    for (int j = 0; j <= y; j++)
        dp[0][j] = 1;
    for (int i = 0; i <= x; i++)
        dp[i][0] = 1;
    for (int i = 1; i <= x; i++)
    {
        for (int j = 1; j <= y; j++)
          {
             dp[i][j] = dp[i - 1][j] + dp[i][j-1];
          }
    }
    cout << dp[x][y] << endl;
}
