#include <cstdio>
#include <algorithm>
#include<iostream>
using namespace std;
int a[1000];
int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++) cin>>a[i];
    int ans=0;
    sort(a,a+n);
    for(int i=1;i<n;i++)
    {
        a[i]=a[i]+a[i-1];
        ans+=a[i];
        int t=a[i];
        for(int j=i+1;j<n&&a[j]<a[i];j++)
        {
            a[j-1]=a[j];
            a[j]=t;
        }
    }
    cout<<ans<<endl;
}
咋一看，觉得此题目和经典的石子合并很相似，其实不然，石子的合并必须是相邻的2堆，要按照一定得顺序进行合并，而果子合并则不需要是相邻的，可以采取以下的步骤进行合并：
（1）先将所有的数按从大到小的顺序排序，取最后两个数合并；（之所以从大到小排列，是为了方便后面的数组维护）
（2）将两个数的和插入到数组中，（插入排序）随时保持数组有序；（如果在整理数组的时候仍然调用快速排序，则速度会降慢，因为此时的数组是有序的，只需要将合并后的数放入到有序数组的适当位置，使用插入排序更合适。）
（3）合并过程中做数组维护，合并到一堆时结束。
