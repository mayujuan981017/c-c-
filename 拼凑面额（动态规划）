给你六种面额1、5、10、20、50、100元的纸币，
假设每种币值的数量都足够多，编写程序求组成N元（N为0-10000的非负整数）的不同组合的个数。

/*动态规划
    需要拼凑的面额是n，
    维护dp[i],表示取到i时的组合数目，dp[0]=1，
    面额数组a[6]={1,5,10,20,50,100}，
    dp[j]=dp[j]+dp[j-a[i]],约数条件j>a[i]。
    因为面额数目任意，所以需要分别处理只有面额1时，
    组合钱数为1~n的各自组合数dp[1]~dp[n],
    然后有面额1,5时，组合钱数为1~n的各自组合数dp[1]~dp[n],
    依此内推。。。详情见程序。
*/
#include<iostream>
#include<vector>
using namespace std;
 
int main()
{
    int n;
    cin >> n;
    int a[6] = {1,5,10,20,50,100};
    vector<long> dp(n+1,0);   //当数字很大时，int表示不够
    dp[0] = 1;
    for (int i = 0; i < 6; i++)
     {
        for (int j = 1; j <= n; j++)
          {
               if (j >= a[i])
             dp[j] = dp[j] + dp[j-a[i]]; //j值取和不取两种情况组合数目之和
          }
     }
    cout << dp[n] << endl;
    return 0;
}




#include <cstdio>
#include <iostream>
using namespace std;
int main()
{
    int n,cnt=0;
    cin>>n;
    for(int i=0;i<=n/100;i++)
    {
        int n1=n-i*100;
        for(int j=0;j<=n1/50;j++)
        {
            int n2=n1-50*j;
            for(int k=0;k<=n2/20;k++)
            {
                int n3=n2-20*k;
                for(int b=0;b<=n3/10;b++)
                {
                    int n4=n3-10*b;
                    cnt=cnt+n4/5+1;
                }
            }
        }
    }
    cout<<cnt<<endl;
}
